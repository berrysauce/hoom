{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Hoom Documentation!","text":"<p>This is the documentation for Hoom \ud83c\udf89</p> <p>Warning</p> <p>Hoom is still under development. It is not recommended at this point, to use Hoom in a production environment.</p>"},{"location":"#what-is-hoom","title":"\ud83c\udfe1 What is Hoom?","text":"<p>Hoom is a Python package that allows you to easily build your own HomeKit Bridge &amp; Accessories. It works with and is heavily inspired by HAP-python &amp; FastAPI. </p> <p>To make the development of HomeKit compatible bridges as easy as possible, Hoom uses function decorators. This drastically simplifies the process. Hoom also comes with a minimalist web UI, which allows you to control your HomeKit Accessories from any device in your local network.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>HomeKit Bridge</li> <li>Minimalist Web UI</li> <li>Create custom HomeKit Accessories with function decorators</li> <li>Customizable</li> <li>Easy to use</li> </ul>"},{"location":"#credits","title":"\ud83d\udce3 Credits","text":"<p>A special thanks goes out to these Python packages/frameworks and their authors:</p> <ul> <li>HAP-python - Hoom wouldn't be possible without this HomeKit Accessory Protocol implementation by Ivan Kalchev</li> <li>FastAPI - Hoom uses FastAPI by Sebasti\u00e1n Ram\u00edrez for its web server &amp; UI and is heavily inspired by it</li> </ul> <p>A special thanks also goes out to:</p> <ul> <li>Tabler Icons - The icon for Hoom is from Tabler Icons</li> </ul>"},{"location":"coc/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"coc/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"coc/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"coc/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"coc/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"coc/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at coc@foerstal.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"coc/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"coc/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"coc/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"coc/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"coc/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"coc/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"disclaimer/","title":"Legal Disclaimer","text":"<p>Hoom is an open-source Python package designed to simplify the creation of HomeKit-compatible bridges and accessories. While Hoom aims to provide a seamless integration with Apple's HomeKit framework, it is important to note that Hoom is not affiliated, endorsed, or sponsored by Apple Inc.</p> <p>Apple, HomeKit, and related trademarks are the property of Apple Inc. The use of these trademarks is for descriptive purposes only, and their mention in connection with the Hoom project does not imply any endorsement or relationship between Hoom and Apple Inc.</p> <p>Hoom is developed and maintained independently by Paul Haedrich, and any issues, concerns, or inquiries related to Hoom should be directed to the project's GitHub repository or other official communication channels.</p> <p>Please be aware that using Hoom in your projects is at your own risk, and we recommend reviewing the project's documentation, licensing, and any potential implications on your development before integrating it into your applications.</p> <p>By using Hoom, you acknowledge and agree to these terms and conditions.</p>"},{"location":"advanced/custom-accessories/","title":"Custom Accessories","text":"<p>(Coming soon!)</p>"},{"location":"basics/bridge/","title":"Bridge","text":"<p>The Bridge is the main part of Hoom. It is responsible for the communication via the HomeKit Accessory Protocol (HAP). It also handles the creation of Accessories and their Services. The Bridge is resembled by the <code>Hoom</code> class.</p>"},{"location":"basics/bridge/#how-to-configure-the-bridge","title":"How to configure the Bridge","text":"<p>The Bridge has a few configuration options, which can be set while initializing the <code>Hoom</code> class.</p> <pre><code>from hoom import Hoom\n\nhoom = Hoom(\n    name: \"My HomeKit Bridge\",\n    server: True,\n    host: \"localhost\",\n    port: 8553\n)\n\nhoom.run()\n</code></pre>"},{"location":"basics/bridge/#configuration-options","title":"Configuration Options","text":"<p>Note</p> <p>These configuration options are optional. You can also initialize the <code>Hoom</code> class without any arguments if you're fine with the defaults.</p> <ul> <li>Name: Set the name of your HomeKit Bridge. This will be displayed in the Apple Home app. Defaults to <code>Hoom Bridge</code>.</li> <li>Server: Set to <code>True</code> if you want to enable the web server. This is required if you want to use the web UI. Hoom is capable of running without the web server. Defaults to <code>True</code>.</li> <li>Host: Set the host of the web server. Defaults to <code>localhost</code>.</li> <li>Port: Set the port of the web server. Defaults to <code>8553</code>.</li> </ul>"},{"location":"basics/responses/","title":"Responses","text":"<p>Responses are a way to receive and send data to and from your Hoom Bridge in a standardised way.</p>"},{"location":"basics/responses/#how-to-use-responses","title":"How to use Responses","text":"<p>You can receive data by defining a function with a response as an argument. The response will be passed to the function when the accessory is triggered.</p> <pre><code>@hoom.lightbulb(\"Light\")\ndef light(response: Lightbulb.Response):\n    print(response.on) # boolean value\n    ...\n\n    return\n</code></pre> <p>In this case, we've set the <code>response</code> argument of the <code>light</code> function to be of the type <code>Lightbulb.Response</code>. This means that the <code>response</code> object will have the attributes of the <code>Lightbulb.Response</code> object, wich are passed on everytime the accessory is triggered, e.g. when it's turned on or off.</p> <p>We can also return data to the Hoom Bridge by returning a response object from the function.</p> <pre><code>from random import randint\n...\n\n@hoom.temperature_sensor(\"Temperature Sensor\")\ndef temperature_sensor(response: TemperatureSensor.Response):\n    ...\n    new_temp = randint(10, 30)\n\n    return TemperatureSensor.Response(temp=new_temp)\n</code></pre> <p>In this case, we're setting the <code>temp</code> attribute of the <code>TemperatureSensor.Response</code> object to a random value between 10 and 30. This data will then be sent to the Hoom Bridge and then to HomeKit.</p>"},{"location":"basics/responses/#response-types-attributes","title":"Response types &amp; attributes","text":"<p>You can learn more about the individual response types in the \"Accessories\" section of these docs.</p>"},{"location":"basics/accessories/lightbulb/","title":"Lightbulb","text":"<p>The <code>Lightbulb</code> accessory type is a simple accessory that can be turned on or off. It returns a <code>Lightbulb.Response</code> object which contains the state of the lightbulb, set by HomeKit. </p> <p>In contrast to the <code>Switch</code> accessory, the <code>Lightbulb</code> accessory can also be dimmed and set to a certain hue &amp; saturation.</p> <pre><code>from hoom import Hoom\nfrom hoom.accessory_types import Lightbulb\n\nhoom = Hoom()\n\n@hoom.lightbulb(\"Advanced Light\", dimmable=True, colorable=True)\ndef advanced_light(response: Lightbulb.Response):\n    if response.on:\n        print(\"Lamp is now on\")\n        print(\"Brightness: \" + str(response.brightness))\n        print(\"Hue: \" + str(response.hue))\n        print(\"Saturation: \" + str(response.saturation))\n    else:\n        print(\"Lamp is now off\")\n\n    return\n\nhoom.run()\n</code></pre> <p>As with all other accessories, you can define your own logic on what happens, when you turn on or off the lightbulb. </p>"},{"location":"basics/accessories/lightbulb/#lightbulbresponse","title":"<code>Lightbulb.Response</code>","text":"<p>The <code>Lightbulb.Response</code> object contains the following attributes:</p> <ul> <li><code>on</code> - A boolean value indicating whether the lightbulb is turned on or off.</li> </ul> <p>If you set <code>dimable=True</code> in the decorator, the following attributes are also available:</p> <ul> <li><code>brightness</code> - An integer value between <code>0</code> and <code>100</code> indicating the brightness of the lightbulb.</li> </ul> <p>If you set <code>colorable=True</code> in the decorator, the following attributes are also available:</p> <ul> <li><code>hue</code> - An integer value between <code>0</code> and <code>360</code> indicating the hue of the lightbulb.</li> <li><code>saturation</code> - An integer value between <code>0</code> and <code>100</code> indicating the saturation of the lightbulb.</li> </ul>"},{"location":"basics/accessories/switch/","title":"Switch","text":"<p>The switch accessory type is the simplest accessory that can be turned on or off. It returns a <code>Switch.Response</code> object which contains the state of the switch, set by HomeKit.</p> <pre><code>from hoom import Hoom\nfrom hoom.accessory_types import Switch\n\nhoom = Hoom()\n\n@hoom.switch(\"Switch \")\ndef switch(response: Switch.Response):\n    if response.on:\n        print(\"Switch is now on\")\n    else:\n        print(\"Switch is now off\")\n\n    return\n\nhoom.run()\n</code></pre> <p>As with all other accessories, you can define your own logic on what happens, when you turn on or off the switch. </p>"},{"location":"basics/accessories/switch/#switchresponse","title":"<code>Switch.Response</code>","text":"<p>The <code>Switch.Response</code> object contains the following attributes:</p> <ul> <li><code>on</code> - A boolean value indicating whether the switch is turned on or off.</li> </ul>"},{"location":"basics/accessories/temperature-sensor/","title":"Temperature Sensor","text":"<p>The <code>TemperatureSensor</code> accessory type is an accessory, that provides data to HomeKit, rather than receive it. It returns a <code>TemperatureSensor.Response</code> object which contains the previous set temperature. </p> <p>Since the <code>TemperatureSensor</code> accessory supplies data, you can optionally set an interval for the polling rate of the accessory in seconds. This can be especially helpful if you receive data from an external source, like an API, and you're required to comply with rate limits.</p> <pre><code>from hoom import Hoom\nfrom hoom.accessory_types import TemperatureSensor\n\nfrom random import randint\n\nhoom = Hoom()\n\n@hoom.temperature_sensor(\"Standard Temperature Sensor\", interval=10)\ndef standard_temperature_sensor(response: TemperatureSensor.Response):\n    print(\"Previous Temperature: \" + str(response.temp))\n    new_temp = randint(10, 30)\n\n    return TemperatureSensor.Response(temp=new_temp)\n\nhoom.run()\n</code></pre> <p>As with all other accessories, you can define your own logic on how to receive the temperature.</p>"},{"location":"basics/accessories/temperature-sensor/#temperaturesensorresponse","title":"<code>TemperatureSensor.Response</code>","text":"<p>The <code>TemperatureSensor.Response</code> object contains the following attributes:</p> <ul> <li><code>temp</code> - A float value indicating the temperature.</li> </ul>"},{"location":"getting-started/examples/","title":"Examples","text":"<p>(Coming soon!)</p>"},{"location":"getting-started/installation/","title":"Installing &amp; Updating","text":""},{"location":"getting-started/installation/#installing-hoom","title":"Installing hoom","text":"<p>Hoom is available on PyPi. You can easily install it using pip:</p> <pre><code>pip install hoom\n</code></pre> <p>Note</p> <p>Hoom requires Python 3.8 or higher.</p>"},{"location":"getting-started/installation/#updating-hoom","title":"Updating hoom","text":"<p>If you need to update hoom, you can use the following command:</p> <pre><code>pip install hoom --upgrade\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>Here's a little script which shows how easy Hoom is to use:</p> <pre><code>from hoom import Hoom\nfrom hoom.accessory_types import Switch\n\nhoom = Hoom()\n\n@hoom.switch(\"Switch \")\ndef switch(response: Switch.Response):\n    if response.on:\n        print(\"Switch is now on\")\n    else:\n        print(\"Switch is now off\")\n\n    return\n\nhoom.run()\n</code></pre> <p>As you can see, Hoom is very similar to frameworks like FastAPI. No need for complicated classes with lots of methods. Just use the <code>@hoom.&lt;&lt;accessory&gt;&gt;</code> decorator and you're good to go.</p> <p>Hoom takes over the job of communicating with HomeKit and establishing your function as a HomeKit accessory. You just have to write the code for your accessory.</p>"},{"location":"getting-started/quickstart/#running-the-script","title":"Running the script","text":"<p>Start Hoom by running your script, e.g. with:</p> <pre><code>python3 my-bridge.py\n</code></pre> <p>Hoom will start a web server at http://localhost:8553 by default. You can change this by passing the <code>host</code> and <code>port</code> argument to the <code>Hoom</code> class. When visiting the web server you'll see a small UI with the configuation instructions.</p>"},{"location":"security/guide/","title":"How to keep your Bridge secure","text":"<p>(Coming soon!)</p>"},{"location":"security/policy/","title":"Security Policy","text":""},{"location":"security/policy/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you find a vulnerability in the code of this project, please continue with a responsible disclosure. We'll try to get back to you as soon as possible and coordinate a fix, if possible with you.</p> <p>Please report Security Vulnerabilities to: security@foerstal.com</p> <p>Thank you!</p>"},{"location":"web/api/","title":"Hoom API","text":"<p>(Coming soon!)</p>"},{"location":"web/guide/","title":"How to use the Web UI","text":"<p>(Coming soon!)</p>"}]}